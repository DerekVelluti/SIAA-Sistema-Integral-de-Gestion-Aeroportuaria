-- ##########################################################################
-- #  SCRIPTS PARA CREAR BASE DE DATOS EN DATAWAREHOUSE SIN RESTRICCIONES   #
-- #                    PARA LA ZONA DE STAGING (DWSIAA)                    #
-- ##########################################################################

--Creamos la base de datos:

CREATE DATABASE SIAA;
GO

--Cambiamos de contexto a la base de datos recien creada:

USE SIAA;
GO

-- ===============================================
--BLOQUE 1: Infraestructura física del aeropuerto:
-- ===============================================

--Este bloque define toda la estructura física del aeropuerto: países, aeropuertos, terminales y puertas de embarque.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA INF;
GO

-- =========================================
-- 1. TABLA PAISES
-- =========================================

CREATE TABLE INF.PAISES (
    ID_Pais INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Codigo_ISO NVARCHAR(3) NOT NULL UNIQUE,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL

);
GO

-- =========================================
-- 2. TABLA AEROPUERTOS
-- =========================================

CREATE TABLE INF.AEROPUERTOS (
    ID_Aeropuerto INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(150) NOT NULL,
    Codigo_IATA CHAR(3) NOT NULL UNIQUE, -- Ej: LAX, JFK
    Ciudad NVARCHAR(100) NOT NULL,
    ID_Pais INT NOT NULL,
    Capacidad_Anual_Pasajeros INT,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Aeropuerto_Pais FOREIGN KEY (ID_Pais)
    REFERENCES INF.PAISES(ID_Pais)
);
GO

-- =========================================
-- 3. TABLA TERMINALES
-- =========================================

CREATE TABLE INF.TERMINALES (
    ID_Terminal INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(50) NOT NULL,
    ID_Aeropuerto INT NOT NULL,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Terminal_Aeropuerto FOREIGN KEY (ID_Aeropuerto)
    REFERENCES INF.AEROPUERTOS(ID_Aeropuerto)
);
GO

-- =========================================
-- 4. TABLA PUERTAS_EMBARQUE
-- =========================================

CREATE TABLE INF.PUERTAS_EMBARQUE (
    ID_Puerta INT IDENTITY(1,1) PRIMARY KEY,
    Codigo_Puerta NVARCHAR(10) NOT NULL,
    ID_Terminal INT NOT NULL,
    Tipo_Puerta NVARCHAR(20) DEFAULT 'General',
    Estado NVARCHAR(20) DEFAULT 'Activa',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Puerta_Terminal FOREIGN KEY (ID_Terminal)
    REFERENCES INF.TERMINALES(ID_Terminal)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 1
-- =========================================

INSERT INTO INF.PAISES (Nombre, Codigo_ISO)
VALUES 
('Costa Rica', 'CRI'),
('Estados Unidos', 'USA'),
('Panamá', 'PAN');
GO
-- ===========================================================================================

INSERT INTO INF.AEROPUERTOS (Nombre, Codigo_IATA, Ciudad, ID_Pais, Capacidad_Anual_Pasajeros)
VALUES 
('Aeropuerto Internacional Juan Santamaría', 'SJO', 'Alajuela', 1, 5300000),
('Aeropuerto Internacional Daniel Oduber', 'LIR', 'Liberia', 1, 1800000),
('Aeropuerto Internacional de Tocumen', 'PTY', 'Ciudad de Panamá', 3, 15500000),
('Aeropuerto Internacional de Miami', 'MIA', 'Miami', 2, 45000000);
GO
-- ===========================================================================================

INSERT INTO INF.TERMINALES (Nombre, ID_Aeropuerto)
VALUES
('Terminal Principal', 1),
('Terminal Doméstica', 1),
('Terminal A', 2),
('Terminal Internacional', 3);
GO
-- ===========================================================================================

INSERT INTO INF.PUERTAS_EMBARQUE (Codigo_Puerta, ID_Terminal, Tipo_Puerta, Estado)
VALUES 
('A1', 1, 'General', 'Activa'),
('A2', 1, 'General', 'Activa'),
('B1', 2, 'VIP', 'Activa'),
('C1', 3, 'Carga', 'Inactiva'),
('C2', 3, 'General', 'Activa');
GO
-- ===========================================================================================
--Select de prueba:
SELECT * FROM INF.PAISES;
SELECT * FROM INF.AEROPUERTOS;
SELECT * FROM INF.TERMINALES;
SELECT * FROM INF.PUERTAS_EMBARQUE;


-- ===============================================
--BLOQUE 2: Aerolíneas y Aeronaves
-- ===============================================

--Este bloque es fundamental para: Mejorar mantenimiento preventivo, asignar la flota más eficiente, tomar decisiones para la renovación de la flota,
--negociar slots, tarifas y evitar sobrecupo o subutilización.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA OPA;
GO

-- =========================================
-- 1. TABLA AEROLINEAS
-- =========================================

CREATE TABLE OPA.AEROLINEAS (
    ID_Aerolinea INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Codigo_IATA CHAR(2) NOT NULL UNIQUE,
    Pais_Origen INT NOT NULL,
    Activa BIT DEFAULT 1,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Aerolinea_Pais FOREIGN KEY (Pais_Origen)
    REFERENCES INF.PAISES(ID_Pais)
);
GO

-- =========================================
-- 2. TABLA AERONAVES
-- =========================================

CREATE TABLE OPA.AERONAVES (
    ID_Aeronave INT IDENTITY(1,1) PRIMARY KEY,
    Matricula NVARCHAR(10) NOT NULL UNIQUE,
    Modelo NVARCHAR(50) NOT NULL,
    Capacidad_Pasajeros INT NOT NULL,
    Capacidad_Carga_KG INT,
    Fecha_Fabricacion DATE,
    ID_Aerolinea INT NOT NULL,
    Estado NVARCHAR(20) DEFAULT 'Operativa',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Aeronave_Aerolinea FOREIGN KEY (ID_Aerolinea)
    REFERENCES OPA.AEROLINEAS(ID_Aerolinea)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 2
-- =========================================

INSERT INTO OPA.AEROLINEAS (Nombre, Codigo_IATA, Pais_Origen)
VALUES 
('Avianca', 'AV', 3),
('American Airlines', 'AA', 2),
('Delta Airlines', 'DL', 2),
('Sansa Regional', 'RZ', 1);
GO

-- ===========================================================================================

INSERT INTO OPA.AERONAVES (Matricula, Modelo, Capacidad_Pasajeros, Capacidad_Carga_KG, Fecha_Fabricacion, ID_Aerolinea, Estado)
VALUES 
('N101AA', 'Boeing 737-800', 160, 18000, '2017-03-25', 2, 'Operativa'),
('N202DL', 'Airbus A320', 150, 17000, '2018-08-14', 3, 'Mantenimiento'),
('TI-BJO', 'Cessna 208B Grand Caravan', 12, 1100, '2020-01-10', 4, 'Operativa'),
('HP-1872AV', 'Airbus A321', 220, 21000, '2019-06-01', 1, 'Operativa');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM OPA.AEROLINEAS;
SELECT * FROM OPA.AERONAVES;


-- ===============================================
--BLOQUE 3: Rutas Aéreas y Vuelos
-- ===============================================

--Este será el corazón operativo: salidas, llegadas, destinos, demoras, tráfico aéreo.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA VUE;
GO

-- =========================================
-- 1. TABLA RUTAS_AEREAS
-- =========================================

CREATE TABLE VUE.RUTAS_AEREAS (
    ID_Ruta INT IDENTITY(1,1) PRIMARY KEY,
    ID_Aeropuerto_Origen INT NOT NULL,
    ID_Aeropuerto_Destino INT NOT NULL,
    Distancia_KM INT NOT NULL,
    Duracion_Estimada_MIN INT,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Ruta_Origen FOREIGN KEY (ID_Aeropuerto_Origen)
    REFERENCES INF.AEROPUERTOS(ID_Aeropuerto),
    CONSTRAINT FK_Ruta_Destino FOREIGN KEY (ID_Aeropuerto_Destino)
    REFERENCES INF.AEROPUERTOS(ID_Aeropuerto)
);
GO

-- =========================================
-- 2. TABLA FRECUENCIA_RUTAS
-- =========================================

CREATE TABLE VUE.FRECUENCIAS (
    ID_Frecuencia INT IDENTITY(1,1) PRIMARY KEY,
    Descripcion NVARCHAR(255) NOT NULL,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL, 
);
GO

-- =========================================
-- 3. TABLA RUTAS_HORARIOS_PROGRAMADOS
-- =========================================

CREATE TABLE VUE.HORARIOS_PROGRAMADOS (
    ID_Horario INT IDENTITY(1,1) PRIMARY KEY,
    ID_Ruta INT NOT NULL,
    ID_Frecuencia INT NOT NULL,
    Hora_Salida TIME NOT NULL,
    Hora_Llegada TIME NOT NULL,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Horarios_Ruta FOREIGN KEY (ID_Ruta) 
    REFERENCES VUE.RUTAS_AEREAS (ID_Ruta),
    CONSTRAINT FK_Horarios_Frecuencia FOREIGN KEY (ID_Frecuencia) 
    REFERENCES VUE.FRECUENCIAS(ID_Frecuencia)
);
GO

-- =========================================
-- 4. TABLA VUELOS
-- =========================================

CREATE TABLE VUE.VUELOS (
    ID_Vuelo INT IDENTITY(1,1) PRIMARY KEY,
    Numero_Vuelo NVARCHAR(10) NOT NULL,
    ID_Ruta INT NOT NULL,
    ID_Aeronave INT NOT NULL,
    ID_Horario INT NOT NULL,	
    Fecha_Salida DATE NOT NULL,
    Hora_Salida TIME NOT NULL,
    Hora_Llegada TIME NOT NULL,
    Estado NVARCHAR(20) DEFAULT 'Programado',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Vuelo_Ruta FOREIGN KEY (ID_Ruta)
    REFERENCES VUE.RUTAS_AEREAS(ID_Ruta),
    CONSTRAINT FK_Vuelo_Aeronave FOREIGN KEY (ID_Aeronave)
    REFERENCES OPA.AERONAVES(ID_Aeronave),
    CONSTRAINT FK_Vuelos_Horarios FOREIGN KEY (ID_Horario) 
    REFERENCES VUE.HORARIOS_PROGRAMADOS(ID_Horario)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 3
-- =========================================

INSERT INTO VUE.RUTAS_AEREAS (ID_Aeropuerto_Origen, ID_Aeropuerto_Destino, Distancia_KM, Duracion_Estimada_MIN)
VALUES 
(1, 3, 550, 75),     -- Ruta 1: SJO a PTY
(1, 2, 220, 45),     -- Ruta 2: SJO a LIR
(1, 1, 0, 0),        -- Ruta 3: SJO a SJO (entrenamiento)
(1, 4, 2000, 195),   -- Ruta 4: SJO a aeropuerto ficticio
(2, 1, 220, 45),     -- Ruta 5: LIR a SJO
(3, 1, 550, 75);     -- Ruta 6: PTY a SJO
GO

-- ===========================================================================================

INSERT INTO VUE.FRECUENCIAS (Descripcion) VALUES
('Diario'),                    -- ID 1
('Lunes-Miércoles-Viernes'),   -- ID 2
('Solo fines de semana'),      -- ID 3
('Martes-Jueves'),             -- ID 4
('Solo Domingos'),             -- ID 5
('Martes a Sábado');           -- ID 6
GO

-- ===========================================================================================

INSERT INTO VUE.HORARIOS_PROGRAMADOS (ID_Ruta, ID_Frecuencia, Hora_Salida, Hora_Llegada) VALUES
(1, 1, '08:00', '08:50'),  -- SJO → PTY Diario
(2, 2, '14:30', '15:15'),  -- SJO → LIR Lun-Mie-Vie
(3, 3, '09:00', '09:00'),  -- SJO → SJO (entrenamiento)
(4, 4, '17:00', '19:00'),  -- SJO → ficticio Mar-Jue
(5, 5, '11:00', '11:45'),  -- LIR → SJO Domingos
(6, 6, '13:15', '14:10');  -- PTY → SJO Mar-Sab
GO

-- ===========================================================================================

INSERT INTO VUE.VUELOS (Numero_Vuelo, ID_Ruta, ID_Aeronave, ID_Horario, Fecha_Salida, Hora_Salida, Hora_Llegada, Estado)
VALUES
('AV693', 1, 1, 1,  '2025-06-01', '08:00:00', '08:50:00', 'Programado'),
('AV694', 1, 2, 1,  '2025-06-02', '08:00:00', '08:50:00', 'Atrasado'),
('LR701', 2, 1, 2,  '2025-06-03', '14:30:00', '15:15:00', 'Programado'),
('LR702', 2, 3, 2,  '2025-06-04', '14:30:00', '15:15:00', 'Cancelado'),
('IN000', 3, 2, 3,  '2025-06-05', '09:00:00', '09:00:00', 'Cancelado'),
('CM801', 4, 1, 4,  '2025-06-06', '17:00:00', '19:00:00', 'Finalizado'),
('CM802', 4, 2, 4,  '2025-06-07', '17:00:00', '19:00:00', 'Atrasado'),
('CM803', 4, 3, 4,  '2025-06-08', '17:00:00', '19:00:00', 'Programado'),
('AV695', 1, 2, 1,  '2025-06-09', '08:00:00', '08:50:00', 'Programado'),
('LR703', 2, 1, 2,  '2025-06-10', '14:30:00', '15:15:00', 'Finalizado'),
('LR704', 5, 3, 5,  '2025-06-11', '11:00:00', '11:45:00', 'Programado'),
('CM804', 6, 2, 6,  '2025-06-12', '13:15:00', '14:10:00', 'Atrasado');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM VUE.RUTAS_AEREAS;
SELECT * FROM VUE.FRECUENCIAS;
SELECT * FROM VUE.HORARIOS_PROGRAMADOS;
SELECT * FROM VUE.VUELOS;


-- ========================================================
--BLOQUE 4: Empleados del aereopuerto, turnos y asistencia.
-- ======================================================== 

--Modela la estructura organizativa y operativa del personal aeroportuario,
--permitiendo analizar desempeño, distribución por roles, eficiencia de turnos, etc.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA RRH;
GO

-- =========================================
-- 1. TABLA EMPLEADOS
-- =========================================

CREATE TABLE RRH.EMPLEADOS (
    ID_Empleado INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Apellido NVARCHAR(100) NOT NULL,
    Cedula NVARCHAR(20) UNIQUE NOT NULL,
    Fecha_Nacimiento DATE NOT NULL,
    Genero NVARCHAR(10),
    Cargo NVARCHAR(50) NOT NULL,
    ID_Aeropuerto INT NOT NULL,
    Fecha_Contratacion DATE NOT NULL,
    Estado NVARCHAR(20) DEFAULT 'Activo',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Empleado_Aeropuerto FOREIGN KEY (ID_Aeropuerto)
    REFERENCES INF.AEROPUERTOS(ID_Aeropuerto)
);
GO

-- =========================================
-- 2. TABLA TURNOS_EMPLEADOS
-- =========================================

CREATE TABLE RRH.TURNOS_EMPLEADOS (
    ID_Turno INT IDENTITY(1,1) PRIMARY KEY,
    ID_Empleado INT NOT NULL,
    Fecha DATE NOT NULL,
    Hora_Entrada TIME NOT NULL,
    Hora_Salida TIME NOT NULL,
    Tipo_Turno NVARCHAR(20),
    Estado NVARCHAR(20) DEFAULT 'Asignado',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Turno_Empleado FOREIGN KEY (ID_Empleado)
    REFERENCES RRH.EMPLEADOS(ID_Empleado)
);
GO

-- =========================================
-- 3. TABLA ASISTENCIAS_EMPLEADOS
-- =========================================

CREATE TABLE RRH.ASISTENCIAS_EMPLEADOS (
    ID_Asistencia INT IDENTITY(1,1) PRIMARY KEY,
    ID_Empleado INT NOT NULL,
    Fecha DATE NOT NULL,
    Hora_Entrada TIME,
    Hora_Salida TIME,
    Estado NVARCHAR(20) DEFAULT 'Presente',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Asistencia_Empleado FOREIGN KEY (ID_Empleado)
    REFERENCES RRH.EMPLEADOS(ID_Empleado)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 4
-- =========================================

INSERT INTO RRH.EMPLEADOS (Nombre, Apellido, Cedula, Fecha_Nacimiento, Genero, Cargo, ID_Aeropuerto, Fecha_Contratacion, Estado)
VALUES
('Carlos', 'Alvarado', '101010101', '1985-04-10', 'Masculino', 'Control Torre', 1, '2010-06-15', 'Activo'),
('María', 'Sánchez', '202020202', '1990-09-22', 'Femenino', 'Seguridad', 1, '2015-01-20', 'Activo'),
('Luis', 'Rojas', '303030303', '1982-12-05', 'Masculino', 'Mantenimiento', 2, '2008-03-10', 'Activo'),
('Andrea', 'Vargas', '404040404', '1995-07-30', 'Femenino', 'Atención al Cliente', 2, '2018-11-01', 'Activo'),
('Jorge', 'Castillo', '505050505', '1988-01-18', 'Masculino', 'Seguridad', 3, '2012-04-25', 'Suspendido');
GO

-- ===========================================================================================

INSERT INTO RRH.TURNOS_EMPLEADOS (ID_Empleado, Fecha, Hora_Entrada, Hora_Salida, Tipo_Turno, Estado)
VALUES
(1, '2025-06-01', '08:00:00', '16:00:00', 'Diurno', 'Completado'),
(2, '2025-06-01', '16:00:00', '00:00:00', 'Nocturno', 'Completado'),
(3, '2025-06-02', '08:00:00', '16:00:00', 'Diurno', 'Asignado'),
(4, '2025-06-02', '16:00:00', '00:00:00', 'Nocturno', 'Asignado'),
(5, '2025-06-03', '08:00:00', '16:00:00', 'Diurno', 'Cancelado');
GO

-- ===========================================================================================

INSERT INTO RRH.ASISTENCIAS_EMPLEADOS (ID_Empleado, Fecha, Hora_Entrada, Hora_Salida, Estado)
VALUES
(1, '2025-06-01', '08:05:00', '16:00:00', 'Presente'),
(2, '2025-06-01', NULL, NULL, 'Ausente'),
(3, '2025-06-02', '08:00:00', '15:45:00', 'Presente'),
(4, '2025-06-02', '16:15:00', '23:55:00', 'Tarde'),
(5, '2025-06-03', NULL, NULL, 'Justificado');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM RRH.EMPLEADOS;
SELECT * FROM RRH.TURNOS_EMPLEADOS;
SELECT * FROM RRH.ASISTENCIAS_EMPLEADOS;


-- =========================================
--BLOQUE 5: Información sobre los pasajeros
-- =========================================

--Este bloque es esencial para realizar minería de datos sobre comportamiento,
--perfiles y patrones de viaje de los pasajeros.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA PAS;
GO

-- =========================================
-- 1. TABLA PASAJEROS
-- =========================================

CREATE TABLE PAS.PASAJEROS (
    ID_Pasajero INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Apellido NVARCHAR(100) NOT NULL,
    Genero NVARCHAR(10),
    Fecha_Nacimiento DATE,
    Nacionalidad NVARCHAR(50),
    Documento_Identidad NVARCHAR(50) UNIQUE,
    Correo_Electronico NVARCHAR(100),
    Telefono NVARCHAR(20),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 5
-- =========================================

INSERT INTO PAS.PASAJEROS (Nombre, Apellido, Genero, Fecha_Nacimiento, Nacionalidad, Documento_Identidad, Correo_Electronico, Telefono)
VALUES
('Laura', 'Guzmán', 'Femenino', '1990-04-15', 'Costarricense', '206590114', 'laura.guzman@gmail.com', '+50688889999'),
('Carlos', 'Ramírez', 'Masculino', '1985-09-23', 'Costarricense', '114590887', 'carlos.ramirez@yahoo.com', '+50688887777'),
('Lucía', 'Fernández', 'Femenino', '2000-01-10', 'Colombiana', 'CC1029384756', 'lucia.f@hotmail.com', '+573003334444'),
('Miguel', 'Chaves', 'Masculino', '1978-07-05', 'Mexicano', 'MX5647382910', 'miguel.ch@gmail.com', '+525598776655'),
('Ana', 'Soto', 'Femenino', '1995-12-30', 'Panameña', 'PA8473629101', 'ana.soto@outlook.com', '+50766778899');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM PAS.PASAJEROS;


-- ======================================================== 
--BLOQUE 6: Información de reservaciones, tickets y pagos.
-- ======================================================== 

--Este bloque es fundamental para vincular a los pasajeros con los vuelos y registrar la compra de boletos.
--Aquí se concentra la relación operativa más directa entre pasajeros y el sistema de vuelos.
--Por parte de pagos este bloque permite registrar el detalle de los pagos que hacen los pasajeros por sus reservaciones. 
--Es clave para análisis financieros y para minería de ingresos por vuelo, ruta, clase, etc.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA COM;
GO

-- =========================================
-- 1. TABLA RESERVACIONES
-- =========================================

CREATE TABLE COM.RESERVACIONES (
    ID_Reservacion INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    ID_Vuelo INT NOT NULL,
    Fecha_Reservacion DATE NOT NULL,
    Clase NVARCHAR(20) DEFAULT 'Económica',
    Costo DECIMAL(10,2) NOT NULL,
    Estado NVARCHAR(20) DEFAULT 'Confirmada',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Reservacion_Pasajero FOREIGN KEY (ID_Pasajero)
    REFERENCES PAS.PASAJEROS(ID_Pasajero),
    CONSTRAINT FK_Reservacion_Vuelo FOREIGN KEY (ID_Vuelo)
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- 2. TABLA PAGOS_DE_RESERVACIONES
-- =========================================

CREATE TABLE COM.PAGOS (
    ID_Pago INT IDENTITY(1,1) PRIMARY KEY,
    ID_Reservacion INT NOT NULL,
    Fecha_Pago DATE NOT NULL,
    Monto DECIMAL(10,2) NOT NULL,
    Metodo_Pago NVARCHAR(30),
    Estado NVARCHAR(20) DEFAULT 'Completado',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Pago_Reservacion FOREIGN KEY (ID_Reservacion)
    REFERENCES COM.RESERVACIONES(ID_Reservacion)
);
GO

-- =========================================
-- 3. TABLA PASES_ABORDAJE (TICKETS)
-- =========================================

CREATE TABLE COM.PASES_ABORDAJE (
    ID_Paseabordaje INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    ID_Vuelo INT NOT NULL,
    Asiento NVARCHAR(10) NOT NULL,
    Clase NVARCHAR(20) NOT NULL,
    Puerta_Embarque NVARCHAR(10) NOT NULL,
    Hora_Embarque TIME NOT NULL,
    Estado NVARCHAR(30) NOT NULL,
    Codigo_QR NVARCHAR(255),
    Fecha_Emision DATE NOT NULL,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_PASES_ABORDAJE_Pasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero),
    CONSTRAINT FK_PASES_ABORDAJE_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 6
-- =========================================

INSERT INTO COM.RESERVACIONES (ID_Pasajero, ID_Vuelo, Fecha_Reservacion, Clase, Costo, Estado)
VALUES
(1, 4, '2025-05-21', 'Económica', 320.00, 'Confirmada'),
(2, 5, '2025-05-22', 'Ejecutiva', 590.00, 'En espera'),
(3, 6, '2025-05-23', 'Económica', 410.00, 'Confirmada'),
(4, 7, '2025-05-24', 'Primera', 1200.00, 'Cancelada'),
(5, 8, '2025-05-25', 'Económica', 350.00, 'Confirmada');
GO

-- ===========================================================================================

INSERT INTO COM.PAGOS (ID_Reservacion, Fecha_Pago, Monto, Metodo_Pago, Estado)
VALUES
(1, '2025-05-21', 320.00, 'Tarjeta', 'Completado'),
(2, '2025-05-22', 590.00, 'Transferencia', 'Pendiente'),
(3, '2025-05-23', 410.00, 'Efectivo', 'Completado'),
(4, '2025-05-24', 1200.00, 'Tarjeta', 'Fallido'),
(5, '2025-05-25', 350.00, 'Tarjeta', 'Completado');
GO

-- ===========================================================================================

INSERT INTO COM.PASES_ABORDAJE (ID_Pasajero, ID_Vuelo, Asiento, Clase, Puerta_Embarque, Hora_Embarque, Estado, Codigo_QR, Fecha_Emision) 
VALUES
(1,4,'12A','Económica','A1','10:30','Emitido','QR001','2024-01-03'),
(2,5,'14B','Ejecutiva','B2','12:15','Emitido','QR002','2024-01-10'),
(3,6,'1C','Primera','C1','09:45','Utilizado','QR003','2024-01-17'),
(4,7,'22D','Económica','D4','11:00','Cancelado','QR004','2024-01-24'),
(5,8,'18F','Económica','E3','13:25','Emitido','QR005','2024-01-31');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM COM.RESERVACIONES;
SELECT * FROM COM.PAGOS;
SELECT * FROM COM.PASES_ABORDAJE;


-- =========================================
--BLOQUE 7: Equipaje y equipamento especial
-- =========================================

--Este bloque registrará los datos del equipaje que lleva cada pasajero en cada vuelo.
--Es vital para control operativo, seguridad y carga.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA EQP;
GO

-- =========================================
-- 1. TABLA EQUIPAJE
-- =========================================

CREATE TABLE EQP.EQUIPAJE (
    ID_Equipaje INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    ID_Vuelo INT NOT NULL,
    Codigo_Equipaje NVARCHAR(50) UNIQUE NOT NULL,
    Tipo NVARCHAR(75) NOT NULL,
    Peso DECIMAL(5,2) NOT NULL,
    Dimensiones NVARCHAR(50),
    Estado NVARCHAR(30) NOT NULL,
    Fecha_Registro DATE NOT NULL,
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Equipaje_Pasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero),
    CONSTRAINT FK_Equipaje_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- 2. TABLA EQUIPAMIENTO_ESPECIAL
-- =========================================

CREATE TABLE EQP.EQUIPAMIENTO_ESPECIAL (
    ID_Equipamiento INT IDENTITY(1,1) PRIMARY KEY,
    ID_Reservacion INT NOT NULL,
    Tipo_Equipamiento NVARCHAR(100) NOT NULL,
    Descripcion NVARCHAR(255),
    Peso_Kg DECIMAL(5,2),
    Dimensiones_CM NVARCHAR(50),
    Requiere_Manejo_Especial BIT DEFAULT 0,
    Costo_Adicional DECIMAL(10,2) DEFAULT 0,
    Estado NVARCHAR(50) DEFAULT 'Registrado',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Equipamiento_Reservacion FOREIGN KEY (ID_Reservacion)
    REFERENCES COM.RESERVACIONES(ID_Reservacion)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 7
-- =========================================

INSERT INTO EQP.EQUIPAJE (ID_Pasajero, ID_Vuelo, Codigo_Equipaje, Tipo, Peso, Dimensiones, Estado, Fecha_Registro, Observaciones)
VALUES
(1, 4, 'EQP001AV693', 'Maleta', 23.50, '55x40x23 cm', 'Registrado', '2025-05-10', 'Sin observaciones'),
(2, 5, 'EQP002AV694', 'Mochila', 8.20, '45x30x20 cm', 'En tránsito', '2025-05-11', 'Etiqueta semi desprendida'),
(3, 6, 'EQP003LR701', 'Maleta', 26.10, '60x45x25 cm', 'Entregado', '2025-05-12', 'Ninguna'),
(4, 7, 'EQP004LR702', 'Bolsa', 5.75, '50x35x20 cm', 'Registrado', '2025-05-12', 'Declarado contenido frágil'),
(5, 8, 'EQP005IN000', 'Equipamiento especial', 30.00, '100x50x40 cm', 'En tránsito', '2025-05-13', 'Equipo deportivo');
GO
-- ===========================================================================================

INSERT INTO EQP.EQUIPAMIENTO_ESPECIAL (ID_Reservacion, Tipo_Equipamiento, Descripcion, Peso_Kg, Dimensiones_CM, Requiere_Manejo_Especial, Costo_Adicional, Estado)
VALUES
(1, 'Mascota', 'Perro de raza pequeña en jaula', 6.5, '60x40x40', 1, 35.00, 'Registrado'),
(2, 'Equipo Deportivo', 'Bicicleta de montaña embalada', 12.0, '150x80x25', 1, 50.00, 'Registrado'),
(3, 'Instrumento Musical', 'Violín en estuche rígido', 3.2, '80x30x15', 0, 20.00, 'Procesado'),
(4, 'Mascota', 'Gato en transportadora rígida', 4.0, '55x35x35', 1, 30.00, 'Registrado'),
(5, 'Equipo Deportivo', 'Tabla de surf', 8.0, '180x50x15', 1, 60.00, 'Registrado');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM EQP.EQUIPAJE;
SELECT * FROM EQP.EQUIPAMIENTO_ESPECIAL;


-- =========================================
--BLOQUE 8: Migración y aduana
-- =========================================

--Este bloque es clave para el control de pasajeros y seguridad fronteriza, 
--ayudando a registrar trámites migratorios y aduaneros para cada pasajero.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA MIG;
GO

-- =========================================
-- 1. TABLA MIGRACION_ADUANA
-- =========================================

CREATE TABLE MIG.MIGRACION_ADUANA (
    ID_Registro INT IDENTITY(1,1) PRIMARY KEY,
    ID_Reservacion INT NOT NULL,
    Fecha_Proceso DATE NOT NULL,
    Tipo_Proceso NVARCHAR(50) NOT NULL,
    Estado NVARCHAR(50) DEFAULT 'Pendiente',
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_MigracionAduana_Reservacion FOREIGN KEY (ID_Reservacion)
    REFERENCES COM.RESERVACIONES(ID_Reservacion)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 8
-- =========================================

INSERT INTO MIG.MIGRACION_ADUANA (ID_Reservacion, Fecha_Proceso, Tipo_Proceso, Estado, Observaciones)
VALUES
(1, '2025-05-20', 'Migración', 'Completado', 'Pasaporte verificado sin incidencias'),
(2, '2025-05-20', 'Aduana', 'Pendiente', 'Equipaje pendiente de revisión'),
(3, '2025-05-21', 'Migración', 'Completado', ''),
(4, '2025-05-21', 'Aduana', 'Rechazado', 'Se detectó mercancía no declarada'),
(5, '2025-05-22', 'Migración', 'Pendiente', 'Falta documento adicional');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM MIG.MIGRACION_ADUANA;


-- =========================================
--BLOQUE 9: Servicios a bordo
-- =========================================

--Registrar los servicios que se ofrecen a los pasajeros durante el vuelo, como comidas, bebidas, entretenimiento, etc.
--Esto es útil para mejorar la experiencia del pasajero y para análisis de consumo.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA SAB;
GO

-- =========================================
-- 1. TABLA SERVICIOS_BORDO
-- =========================================

CREATE TABLE SAB.SERVICIOS_BORDO (
    ID_Servicio INT IDENTITY(1,1) PRIMARY KEY,
    ID_Vuelo INT NOT NULL,
    Tipo_Servicio NVARCHAR(50) NOT NULL,
    Descripcion NVARCHAR(255),
    Costo DECIMAL(10,2) DEFAULT 0,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_ServiciosVuelo FOREIGN KEY (ID_Vuelo)
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- 2. TABLA SERVICIOS_CONSUMIDOS
-- =========================================

CREATE TABLE SAB.SERVICIOS_CONSUMIDOS (
    ID_Consumo INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    ID_Servicio INT NOT NULL,
    Estado NVARCHAR(30) NOT NULL,
    Fecha_Solicitud DATETIME NOT NULL DEFAULT GETDATE(),
    Fecha_Entrega DATETIME NULL,
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Consumo_Pasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero),
    CONSTRAINT FK_Consumo_Servicio FOREIGN KEY (ID_Servicio) 
    REFERENCES SAB.SERVICIOS_BORDO(ID_Servicio)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 9
-- =========================================

INSERT INTO SAB.SERVICIOS_BORDO (ID_Vuelo, Tipo_Servicio, Descripcion, Costo)
VALUES
(4, 'Comida', 'Almuerzo caliente', 15.00),
(5, 'Bebida', 'Café y jugo', 5.00),
(6, 'Entretenimiento', 'Películas y música', 0.00),
(7, 'Comida', 'Snack ligero', 8.00),
(8, 'Bebida', 'Bebidas alcohólicas', 12.00);
GO

-- ===========================================================================================

INSERT INTO SAB.SERVICIOS_CONSUMIDOS (ID_Pasajero, ID_Servicio, Estado, Fecha_Solicitud, Fecha_Entrega, Observaciones)
VALUES
(1, 1, 'Entregado', '2025-05-20 10:15:00', '2025-05-20 10:30:00', 'Cliente satisfecho'),
(2, 3, 'Solicitado', '2025-05-21 14:00:00', NULL, 'Servicio en proceso'),
(3, 2, 'Cancelado', '2025-05-21 09:00:00', NULL, 'Cliente canceló antes de entrega'),
(4, 4, 'Entregado', '2025-05-22 18:20:00', '2025-05-22 18:50:00', 'Servicio entregado sin problemas'),
(5, 5, 'Solicitado', '2025-05-23 08:45:00', NULL, 'Pendiente por confirmar');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM SAB.SERVICIOS_BORDO;
SELECT * FROM SAB.SERVICIOS_CONSUMIDOS;


-- =========================================
--BLOQUE 10: Mantenimiento de aeronaves
-- =========================================

--Creación de SCHEMA para el bloque:
CREATE SCHEMA TEC;
GO

--Registrar y controlar las actividades de mantenimiento preventivo y correctivo de las aeronaves,
--para garantizar la seguridad operacional y cumplir con normativas internacionales.

-- =========================================
-- 1. TABLA MANTENIMIENTO
-- =========================================

CREATE TABLE TEC.MANTENIMIENTO (
    ID_Mantenimiento INT IDENTITY(1,1) PRIMARY KEY,
    ID_Aeronave INT NOT NULL,
    Fecha DATE NOT NULL,
    Hora TIME NOT NULL,
    Tipo_Mantenimiento NVARCHAR(50) NOT NULL,
    Descripcion NVARCHAR(255),
    Costo DECIMAL(10,2),
    Estado NVARCHAR(30) DEFAULT 'Programado',
    Tecnico_Responsable NVARCHAR(100),
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Mantenimiento_Aeronave FOREIGN KEY (ID_Aeronave)
    REFERENCES OPA.AERONAVES(ID_Aeronave)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 10
-- =========================================

INSERT INTO TEC.MANTENIMIENTO (
    ID_Aeronave, Fecha, Hora, Tipo_Mantenimiento, Descripcion, Costo, Estado, Tecnico_Responsable, Observaciones)
VALUES
(1, '2025-05-01', '08:30', 'Preventivo', 'Cambio de aceite y revisión general', 450.00, 'Completado', 'Luis Ramírez', 'Se realizó sin contratiempos'),
(2, '2025-05-03', '09:15', 'Correctivo', 'Reemplazo de frenos hidráulicos', 980.50, 'En proceso', 'Carlos Jiménez', 'Esperando repuestos de proveedor'),
(3, '2025-05-05', '07:45', 'Inspección', 'Inspección semestral de cabina y motores', 1200.00, 'Programado', 'Ana Torres', 'Pendiente validación de jefatura'),
(4, '2025-05-07', '10:00', 'Correctivo', 'Reparación del sistema de climatización', 680.25, 'Completado', 'Ricardo Salas', 'El sistema quedó operando correctamente');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM TEC.MANTENIMIENTO;


-- =========================================
--BLOQUE 11: Inventario de combustible
-- =========================================

--Controlar el uso, almacenamiento y distribución de combustible para cada aeronave y vuelo,
--ayudando en la planificación logística y el control de costos operativos.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA ABC;
GO

-- =========================================
-- 1. TABLA COMBUSTIBLE
-- =========================================

CREATE TABLE ABC.COMBUSTIBLE (
    ID_Registro INT IDENTITY(1,1) PRIMARY KEY,
    ID_Aeronave INT NOT NULL,
    Fecha DATE NOT NULL,
    Cantidad_Galones DECIMAL(10,2) NOT NULL,
    Costo_Total DECIMAL(10,2) NOT NULL,
    Proveedor NVARCHAR(100),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Combustible_Aeronave FOREIGN KEY (ID_Aeronave)
    REFERENCES OPA.AERONAVES(ID_Aeronave)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 11
-- =========================================

INSERT INTO ABC.COMBUSTIBLE (ID_Aeronave, Fecha, Cantidad_Galones, Costo_Total, Proveedor)
VALUES
(1, '2025-05-01', 1500.50, 7500.25, 'Shell Aviation'),
(2, '2025-05-02', 1800.00, 8900.00, 'Chevron Global'),
(3, '2025-05-03', 1200.75, 6100.50, 'Total Energies');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM ABC.COMBUSTIBLE;


-- ============================================
--BLOQUE 12: Clima y condiciones meteorologícas
-- ============================================

--Registrar condiciones meteorológicas relevantes en fechas y horas clave para cada aeropuerto. 
--Esta información permite:

--Analizar el impacto del clima en retrasos o cancelaciones.
--Optimizar la planificación operativa.
--Fortalecer la seguridad y anticipar riesgos.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA MET;
GO

-- =========================================
-- 1. TABLA CLIMA
-- =========================================

CREATE TABLE MET.CLIMA (
    ID_Registro INT IDENTITY(1,1) PRIMARY KEY,
    ID_Aeropuerto INT NOT NULL,
    Fecha DATE NOT NULL,
    Hora TIME NOT NULL,
    Temperatura_C DECIMAL(5,2),
    Humedad_Porc DECIMAL(5,2),
    Velocidad_Viento_KMH DECIMAL(5,2),
    Condicion NVARCHAR(50),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Clima_Aeropuerto FOREIGN KEY (ID_Aeropuerto)
    REFERENCES INF.AEROPUERTOS(ID_Aeropuerto)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 12
-- =========================================

INSERT INTO MET.CLIMA (ID_Aeropuerto, Fecha, Hora, Temperatura_C, Humedad_Porc, Velocidad_Viento_KMH, Condicion)
VALUES
(1, '2025-05-22', '06:00', 23.5, 88.0, 15.2, 'Niebla'),
(2, '2025-05-22', '12:00', 31.2, 60.0, 12.4, 'Soleado'),
(3, '2025-05-22', '18:00', 27.0, 70.0, 25.0, 'Tormenta');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM MET.CLIMA;


-- ========================================================================
--BLOQUE 13: Tablas complementarias para análisis estratégico y operacional
-- ========================================================================

--Este bloque va a fortalecer enormemente la capacidad analítica y de control operacional 
--de la base de datos aeroportuaria.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA INT;
GO

-- =========================================
-- 1. TABLA INCIDENTES_OPERATIVOS
-- =========================================

CREATE TABLE INT.INCIDENTES_OPERATIVOS (
    ID_Incidente INT IDENTITY(1,1) PRIMARY KEY,
    Fecha DATE NOT NULL,
    Hora TIME NOT NULL,
    ID_Vuelo INT,
    ID_Aeronave INT,
    Tipo_Incidente NVARCHAR(255),
    Descripcion NVARCHAR(255),
    Nivel_Severidad NVARCHAR(20),
    Reportado_Por NVARCHAR(100),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Incidente_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo),
    CONSTRAINT FK_Incidente_Aeronave FOREIGN KEY (ID_Aeronave) 
    REFERENCES OPA.AERONAVES(ID_Aeronave)
);
GO

-- =========================================
-- 2. TABLA ESTADISTICAS_DIARIAS
-- =========================================

CREATE TABLE INT.ESTADISTICAS_DIARIAS (
    Fecha DATE PRIMARY KEY,
    Total_Vuelos INT,
    Vuelos_Retrasados INT,
    Total_Pasajeros INT,
    Cancelaciones INT,
    Carga_Transportada_Kg DECIMAL(10,2),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- 3. TABLA TIEMPOS_PROCESO_PASAJEROS
-- =========================================

CREATE TABLE INT.TIEMPOS_PROCESO_PASAJEROS (
    ID_Proceso INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT,
    Fecha DATE,
    Hora_Llegada_Aeropuerto TIME,
    Hora_CheckIn TIME,
    Hora_Seguridad TIME,
    Hora_Abordaje TIME,
    Hora_Despegue TIME,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_TiempoPasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 13
-- =========================================

INSERT INTO INT.INCIDENTES_OPERATIVOS (Fecha, Hora, ID_Vuelo, ID_Aeronave, Tipo_Incidente, Descripcion, Nivel_Severidad, Reportado_Por)
VALUES 
('2025-05-20', '07:45', 4, 1, 'Falla técnica', 'Problemas con el sistema hidráulico detectados antes del despegue.', 'Moderado', 'Técnico Juan Solís'),
('2025-05-21', '10:15', 6, 2, 'Retraso meteorológico', 'Tormenta eléctrica impidió el despegue a tiempo.', 'Bajo', 'Control Torre LIR'),
('2025-05-21', '14:30', 7, 3, 'Alerta médica', 'Pasajero con complicaciones cardíacas a bordo.', 'Crítico', 'Tripulación de cabina'),
('2025-05-22', '18:05', 5, 1, 'Evacuación', 'Evacuación preventiva por olor a quemado en cabina.', 'Moderado', 'Capitán Mario Brenes');
GO

-- ===========================================================================================

INSERT INTO INT.ESTADISTICAS_DIARIAS (Fecha, Total_Vuelos, Vuelos_Retrasados, Total_Pasajeros, Cancelaciones, Carga_Transportada_Kg)
VALUES 
('2025-05-20', 38, 5, 4200, 1, 15400.75),
('2025-05-21', 42, 7, 4980, 2, 16789.40),
('2025-05-22', 35, 4, 3765, 0, 13200.00);
GO

-- ===========================================================================================

INSERT INTO INT.TIEMPOS_PROCESO_PASAJEROS (ID_Pasajero, Fecha, Hora_Llegada_Aeropuerto, Hora_CheckIn, Hora_Seguridad, Hora_Abordaje, Hora_Despegue)
VALUES
(1, '2025-05-20', '06:15', '06:30', '06:55', '07:20', '07:45'),
(2, '2025-05-21', '08:00', '08:20', '08:45', '09:10', '09:35'),
(3, '2025-05-22', '05:45', '06:00', '06:30', '06:55', '07:25');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM INT.INCIDENTES_OPERATIVOS;
SELECT * FROM INT.ESTADISTICAS_DIARIAS;
SELECT * FROM INT.TIEMPOS_PROCESO_PASAJEROS;


-- =================================================================
--BLOQUE 14: Auditoría en sistema, reportes generados y estadisticas
-- =================================================================

--Fundamental para mantener trazabilidad de cambios,
--accesos y actividades dentro de una base de datos crítica como la de un aeropuerto.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA AUD;
GO

-- =========================================
-- 1. TABLA AUDITORIA_SISTEMA
-- =========================================

CREATE TABLE AUD.AUDITORIA_SISTEMA (
    ID_Evento INT IDENTITY(1,1) PRIMARY KEY,
    Fecha DATE NOT NULL,
    Hora TIME NOT NULL,
    Usuario NVARCHAR(100) NOT NULL,
    Rol_Usuario NVARCHAR(50) NOT NULL,
    Modulo NVARCHAR(50) NOT NULL,
    Tipo_Evento NVARCHAR(50) NOT NULL,
    Descripcion NVARCHAR(255) NOT NULL,
    IP_Origen NVARCHAR(45),
    Estado_Evento NVARCHAR(50) DEFAULT 'Éxito',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- 2. TABLA REPORTES_GENERADOS
-- =========================================

CREATE TABLE AUD.REPORTES_GENERADOS (
    ID_Reporte INT IDENTITY(1,1) PRIMARY KEY,
    ID_Evento INT,
    Tipo_Reporte NVARCHAR(100) NOT NULL,
    Fecha_Generacion DATE NOT NULL,
    Generado_Por NVARCHAR(100),
    Periodo_Desde DATE NOT NULL,
    Periodo_Hasta DATE NOT NULL,
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Reporte_Auditoria FOREIGN KEY (ID_Evento)
    REFERENCES AUD.AUDITORIA_SISTEMA(ID_Evento)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 14
-- =========================================

INSERT INTO AUD.AUDITORIA_SISTEMA (Fecha, Hora, Usuario, Rol_Usuario, Modulo, Tipo_Evento, Descripcion, IP_Origen, Estado_Evento)
VALUES
('2025-05-20', '08:15', 'admin', 'Administrador', 'Reservaciones', 'Inserción', 'Se ingresó una nueva reservación para vuelo AV693.', '192.168.1.10', 'Éxito'),
('2025-05-20', '08:18', 'tecnico_lir', 'Técnico de Mantenimiento', 'Mantenimiento', 'Actualización', 'Mantenimiento preventivo en aeronave serie 2.', '192.168.2.15', 'Éxito'),
('2025-05-21', '14:00', 'supervisor_sjo', 'Supervisor de Operaciones', 'Vuelos', 'Eliminación', 'Se eliminó vuelo CM802 por reprogramación.', '172.16.0.3', 'Éxito'),
('2025-05-22', '16:45', 'seguridad', 'Seguridad Aeroportuaria', 'Pasajeros', 'Acceso', 'Consulta de pasajero ID 12 para validación.', '10.0.0.2', 'Éxito'),
('2025-05-22', '17:05', 'admin', 'Administrador', 'Reservaciones', 'Inserción', 'Falló al crear reservación por conflicto en ID.', '192.168.1.10', 'Error');
GO

-- ===========================================================================================

INSERT INTO AUD.REPORTES_GENERADOS (ID_Evento, Tipo_Reporte, Fecha_Generacion, Generado_Por, Periodo_Desde, Periodo_Hasta, Observaciones)
VALUES
(1, 'Operativo', '2025-05-20', 'admin', '2025-05-01', '2025-05-20', 'Reporte de reservas generadas durante el periodo.'),
(2, 'Mantenimiento', '2025-05-20', 'tecnico_lir', '2025-05-10', '2025-05-20', 'Historial de mantenimiento preventivo.'),
(3, 'Operativo', '2025-05-21', 'supervisor_sjo', '2025-05-15', '2025-05-21', 'Registro de vuelos cancelados.'),
(4, 'Seguridad', '2025-05-22', 'seguridad', '2025-05-01', '2025-05-22', 'Consulta y validación de pasajero para control de acceso.'),
(5, 'Sistema', '2025-05-22', 'admin', '2025-05-01', '2025-05-22', 'Registro de error en sistema al crear reservación.');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM AUD.AUDITORIA_SISTEMA;
SELECT * FROM AUD.REPORTES_GENERADOS;


-- =========================================
--BLOQUE 15: Tripulación
-- =========================================

--Asignación de tripulación a vuelos y roles a bordo.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA TRP;
GO

-- =========================================
-- 1. TABLA TRIPULACION
-- =========================================

CREATE TABLE TRP.TRIPULACION (
    ID_Tripulacion INT IDENTITY(1,1) PRIMARY KEY,
    ID_Empleado INT NOT NULL,
    ID_Vuelo INT NOT NULL,
    Rol_Tripulacion NVARCHAR(50) NOT NULL,
    Fecha_Asignacion DATE NOT NULL,
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Tripulacion_Empleado FOREIGN KEY (ID_Empleado) 
    REFERENCES RRH.EMPLEADOS(ID_Empleado),
    CONSTRAINT FK_Tripulacion_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 15
-- =========================================

INSERT INTO TRP.TRIPULACION (ID_Empleado, ID_Vuelo, Rol_Tripulacion, Fecha_Asignacion) 
VALUES
(1,4,'Piloto','2024-01-05'),
(2,4,'Copiloto','2024-01-05'),
(3,4,'Sobrecargo','2024-01-05'),
(4,5,'Piloto','2024-01-12'),
(5,5,'Copiloto','2024-01-12'),
(1,5,'Sobrecargo','2024-01-12'),
(2,6,'Piloto','2024-01-19'),
(3,6,'Copiloto','2024-01-19'),
(4,6,'Sobrecargo','2024-01-19'),
(5,7,'Piloto','2024-01-26'),
(1,7,'Copiloto','2024-01-26'),
(2,7,'Sobrecargo','2024-01-26'),
(3,8,'Piloto','2024-02-02'),
(4,8,'Copiloto','2024-02-02'),
(5,8,'Sobrecargo','2024-02-02'),
(1,9,'Piloto','2024-02-09'),
(2,9,'Copiloto','2024-02-09'),
(3,9,'Sobrecargo','2024-02-09'),
(4,10,'Piloto','2024-02-16'),
(5,10,'Copiloto','2024-02-16'),
(1,10,'Sobrecargo','2024-02-16'),
(2,11,'Piloto','2024-02-23'),
(3,11,'Copiloto','2024-02-23'),
(4,11,'Sobrecargo','2024-02-23'),
(5,12,'Piloto','2024-03-01'),
(1,12,'Copiloto','2024-03-01'),
(2,12,'Sobrecargo','2024-03-01'),
(3,1,'Piloto','2024-03-08'),
(4,2,'Copiloto','2024-03-08'),
(5,3,'Sobrecargo','2024-03-08');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM TRP.TRIPULACION;


-- =========================================
--BLOQUE 16: Seguridad
-- =========================================

--Controles, reportes de incidentes y revisiones.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA SEG;
GO

-- =========================================
-- 1. TABLA CONTROLES_SEGURIDAD
-- =========================================

CREATE TABLE SEG.CONTROLES_SEGURIDAD (
    ID_Control INT IDENTITY(1,1) PRIMARY KEY,
    ID_Vuelo INT NOT NULL,
    Tipo_Control NVARCHAR(100) NOT NULL,
    Fecha_Control DATE NOT NULL,
    Resultado NVARCHAR(50) NOT NULL,
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Control_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- 2. TABLA INCIDENTES_SEGURIDAD
-- =========================================

CREATE TABLE SEG.INCIDENTES_SEGURIDAD (
    ID_Incidente INT IDENTITY(1,1) PRIMARY KEY,
    ID_Vuelo INT NOT NULL,
    Fecha_Incidente DATE NOT NULL,
    Tipo_Incidente NVARCHAR(100) NOT NULL,
    Descripcion NVARCHAR(255),
    Accion_Tomada NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_IncidentesSeguridad_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 16
-- =========================================

INSERT INTO SEG.CONTROLES_SEGURIDAD (ID_Vuelo, Tipo_Control, Fecha_Control, Resultado, Observaciones) 
VALUES
(4, 'Revisión de equipaje', '2025-06-01', 'Aprobado', NULL),
(5, 'Control de identidad', '2025-06-01', 'Aprobado', NULL),
(6, 'Inspección de aeronave', '2025-06-01', 'Observaciones', 'Puerta trasera mal cerrada'),
(7, 'Revisión aleatoria', '2025-06-01', 'Aprobado', NULL),
(8, 'Inspección pre-despegue', '2025-06-01', 'Requiere seguimiento', 'Alarma de sensor activada');
GO

-- ===========================================================================================

INSERT INTO SEG.INCIDENTES_SEGURIDAD (ID_Vuelo, Fecha_Incidente, Tipo_Incidente, Descripcion, Accion_Tomada) 
VALUES
(4, '2025-06-01', 'Equipaje sospechoso', 'Maleta sin dueño en la zona de abordaje', 'Retirada y destrucción controlada'),
(5, '2025-06-01', 'Comportamiento agresivo', 'Pasajero alterado en cabina', 'Removido del vuelo'),
(6, '2025-06-01', 'Fallo técnico', 'Problema en el sistema hidráulico', 'Mantenimiento previo al despegue'),
(7, '2025-06-01', 'Intento de ingreso sin identificación', 'Persona intentó ingresar a la pista', 'Notificada seguridad privada y policía'),
(8, '2025-06-01', 'Objeto prohibido detectado', 'Spray inflamable en equipaje de mano', 'Confiscación y notificación al pasajero');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM SEG.CONTROLES_SEGURIDAD;
SELECT * FROM SEG.INCIDENTES_SEGURIDAD;


-- ========================================================================================
--BLOQUE 17: Marketing, Promociones, atención al cliente y encuestas de opinión de clientes
-- ========================================================================================

--Ofertas, descuentos, campañas, puntos de fidelidad, etc.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA MKT;
GO

-- =========================================
-- 1. TABLA CAMP_MARKETING
-- =========================================

CREATE TABLE MKT.CAMP_MARKETING (
    ID_Camp INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Tipo NVARCHAR(50) NOT NULL,
    Fecha_Inicio DATE NOT NULL,
    Fecha_Fin DATE NOT NULL,
    Descripcion NVARCHAR(255),
    Estado NVARCHAR(20) DEFAULT 'Activa',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- 2. TABLA OFERTAS_APLICADAS
-- =========================================

CREATE TABLE MKT.OFERTAS_APLICADAS (
    ID_Oferta INT IDENTITY(1,1) PRIMARY KEY,
    ID_Camp INT NOT NULL,
    ID_Reservacion INT NOT NULL,
    Descuento_Porcentaje DECIMAL(5,2),
    Monto_Descontado DECIMAL(10,2),
    Fecha_Aplicacion DATE NOT NULL,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Oferta_Campaña FOREIGN KEY (ID_Camp)
    REFERENCES MKT.CAMP_MARKETING(ID_Camp),
    CONSTRAINT FK_Oferta_Reservacion FOREIGN KEY (ID_Reservacion) 
    REFERENCES COM.RESERVACIONES(ID_Reservacion)
);
GO

-- =========================================
-- 3. TABLA FIDELIDAD_PASAJERO
-- =========================================

CREATE TABLE MKT.FIDELIDAD_PASAJERO (
    ID_Registro INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    Puntos_Acumulados INT DEFAULT 0,
    Ultima_Actualizacion DATE NOT NULL,
    Nivel_Fidelidad NVARCHAR(30),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Fidelidad_Pasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero)
);
GO

-- =========================================
-- 4. TABLA ATENCION_CLIENTE
-- =========================================

CREATE TABLE MKT.ATENCION_CLIENTE (
    ID_Atencion INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    Fecha_Solicitud DATE NOT NULL,
    Tipo_Solicitud NVARCHAR(50) NOT NULL,
    Descripcion NVARCHAR(255),
    Estado NVARCHAR(30) NOT NULL DEFAULT 'Pendiente',
    Respuesta NVARCHAR(255),
    Fecha_Respuesta DATE,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_AtencionCliente_Pasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero)
);
GO

-- =========================================
-- 5. TABLA ENCUESTAS_OPINIONES_CLIENTES 
-- =========================================

CREATE TABLE MKT.ENCUESTAS_OPINIONES_CLIENTES (
    ID_Registro INT IDENTITY(1,1) PRIMARY KEY,
    ID_Pasajero INT NOT NULL,
    ID_Vuelo INT NULL,
    Fecha DATE NOT NULL,
    Puntualidad TINYINT CHECK (Puntualidad BETWEEN 1 AND 5),
    Comodidad TINYINT CHECK (Comodidad BETWEEN 1 AND 5),
    Servicio_Bordo TINYINT CHECK (Servicio_Bordo BETWEEN 1 AND 5),
    Limpieza TINYINT CHECK (Limpieza BETWEEN 1 AND 5),
    Calificacion_Global TINYINT CHECK (Calificacion_Global BETWEEN 1 AND 5),
    Comentario NVARCHAR(255),
    Tipo_Servicio NVARCHAR(50),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Encuesta_Pasajero FOREIGN KEY (ID_Pasajero) 
    REFERENCES PAS.PASAJEROS(ID_Pasajero),
    CONSTRAINT FK_Encuesta_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 17
-- =========================================

INSERT INTO MKT.CAMP_MARKETING (Nombre, Tipo, Fecha_Inicio, Fecha_Fin, Descripcion, Estado)
VALUES
('Verano 2025', 'Descuento', '2025-06-01', '2025-08-31', 'Descuentos del 15% en vuelos nacionales.', 'Activa'),
('Viajero Frecuente Oro', 'Fidelidad', '2025-01-01', '2025-12-31', 'Bonificación de puntos por cada vuelo internacional.', 'Activa'),
('Navidad Familiar', 'Promoción', '2025-12-01', '2025-12-31', '2x1 en vuelos para grupos familiares.', 'Programada');
GO

-- ===========================================================================================

INSERT INTO MKT.OFERTAS_APLICADAS (ID_Camp, ID_Reservacion, Descuento_Porcentaje, Monto_Descontado, Fecha_Aplicacion)
VALUES
(1, 5, 15.00, 75.00, '2025-06-10'),
(1, 2, 15.00, 90.00, '2025-06-12'),
(3, 3, 50.00, 120.00, '2025-12-05');
GO

-- ===========================================================================================

INSERT INTO MKT.FIDELIDAD_PASAJERO (ID_Pasajero, Puntos_Acumulados, Ultima_Actualizacion, Nivel_Fidelidad)
VALUES
(1, 4500, '2025-05-01', 'Oro'),
(2, 2800, '2025-04-20', 'Plata'),
(3, 7500, '2025-05-15', 'Platino'),
(4, 1200, '2025-03-30', 'Plata'),
(5, 9800, '2025-05-22', 'Platino');
GO

-- ===========================================================================================

INSERT INTO MKT.ATENCION_CLIENTE (ID_Pasajero, Fecha_Solicitud, Tipo_Solicitud, Descripcion, Estado)
VALUES 
(1, '2025-05-15', 'Reclamo', 'Retraso de vuelo por más de 3 horas.', 'Pendiente'),
(2, '2025-05-16', 'Consulta', '¿Cuál es el peso máximo de equipaje permitido?', 'Resuelto'),
(3, '2025-05-17', 'Sugerencia', 'Incluir más opciones vegetarianas a bordo.', 'En proceso'),
(4, '2025-05-18', 'Reclamo', 'Pérdida de maleta en destino final.', 'Pendiente'),
(5, '2025-05-19', 'Consulta', '¿Cómo puedo cambiar la fecha de mi vuelo?', 'Cerrado');
GO

-- ===========================================================================================

INSERT INTO MKT.ENCUESTAS_OPINIONES_CLIENTES (ID_Pasajero, ID_Vuelo, Fecha, Puntualidad, Comodidad, Servicio_Bordo,Limpieza, Calificacion_Global, Comentario, Tipo_Servicio)
VALUES
(1, 4, '2025-05-01', 5, 4, 4, 5, 5, 'Muy buen servicio y vuelo puntual.', 'Vuelo'),
(2, 5, '2025-05-02', 3, 3, 4, 4, 3, 'Retraso al abordar, pero tripulación amable.', 'Embarque'),
(3, 6, '2025-05-02', 4, 5, 5, 5, 5, 'Excelente comodidad y servicio.', 'Servicio a bordo'),
(4, 7, '2025-05-03', 2, 2, 2, 3, 2, 'Demasiado calor y mucho ruido en cabina.', 'Vuelo'),
(5, 8, '2025-05-03', 4, 3, 4, 4, 4, 'Buen vuelo, aunque el check-in fue lento.', 'Check-in');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM MKT.CAMP_MARKETING;
SELECT * FROM MKT.OFERTAS_APLICADAS;
SELECT * FROM MKT.FIDELIDAD_PASAJERO;
SELECT * FROM MKT.ATENCION_CLIENTE;
SELECT * FROM MKT.ENCUESTAS_OPINIONES_CLIENTES;


-- =========================================
--BLOQUE 18: Inspecciones y Auditorías
-- =========================================

--Control de calidad y cumplimiento normativo.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA CTI;
GO

-- =========================================
-- 1. TABLA INSPECCIONES_AUDITORIAS
-- =========================================

CREATE TABLE CTI.INSPECCIONES_AUDITORIAS (
    ID_Inspeccion INT IDENTITY(1,1) PRIMARY KEY,
    Fecha DATE NOT NULL,
    Tipo_Inspeccion NVARCHAR(100) NOT NULL,
    Area_Evaluada NVARCHAR(100) NOT NULL,
    Responsable NVARCHAR(100),
    Resultado NVARCHAR(50) NOT NULL,
    Observaciones NVARCHAR(255),
    Accion_Correctiva_Requerida BIT DEFAULT 0,
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 18
-- =========================================

INSERT INTO CTI.INSPECCIONES_AUDITORIAS (Fecha, Tipo_Inspeccion, Area_Evaluada, Responsable, Resultado, Observaciones, Accion_Correctiva_Requerida)
VALUES
('2025-05-10', 'Seguridad', 'Control de Acceso', 'Oficial María Castro', 'Aprobado', 'No se detectaron fallas.', 0),
('2025-05-11', 'Mantenimiento', 'Aeronave Serie 12', 'Ingeniero Juan Herrera', 'Requiere Acción Correctiva', 'Fuga menor detectada en sistema hidráulico.', 1),
('2025-05-12', 'Calidad', 'Cabina de Pasajeros', 'Inspectora Ana Rojas', 'Aprobado', 'Cumple con normas de limpieza y presentación.', 0),
('2025-05-13', 'Normativa', 'Almacenamiento de Equipaje', 'Auditoría Interna', 'Rechazado', 'Incumplimiento en etiquetado y separación.', 1),
('2025-05-14', 'Seguridad', 'Zona de Embarque', 'Oficial Luis Quesada', 'Aprobado', 'Se reforzó señalización y delimitación.', 0);
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM CTI.INSPECCIONES_AUDITORIAS;


-- ===========================================
--BLOQUE 19: Logística y Transporte Terrestre
-- ===========================================

--Traslados y transporte entre aeropuerto - hotel.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA LGT;
GO

-- =========================================
-- 1. TABLA LOGISTICA_TERRESTRE
-- =========================================

CREATE TABLE LGT.LOGISTICA_TERRESTRE (
    ID_Transporte INT IDENTITY(1,1) PRIMARY KEY,
    Tipo_Transporte NVARCHAR(50) NOT NULL,
    Origen NVARCHAR(100) NOT NULL,
    Destino NVARCHAR(100) NOT NULL,
    Hora_Salida TIME NOT NULL,
    Hora_Llegada TIME NOT NULL,
    Responsable NVARCHAR(100),
    Capacidad INT,
    Estado NVARCHAR(50) DEFAULT 'Programado',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 19
-- =========================================

INSERT INTO LGT.LOGISTICA_TERRESTRE (Tipo_Transporte, Origen, Destino, Hora_Salida, Hora_Llegada, Responsable, Capacidad, Estado)
VALUES
('Shuttle', 'Aeropuerto Juan Santamaría', 'Hotel Marriot', '09:00', '09:30', 'Luis Solano', 12, 'Programado'),
('Taxi', 'Aeropuerto Juan Santamaría', 'Centro de San José', '10:15', '10:45', 'Cooperativa Coopetaxi', 4, 'En curso'),
('Bus', 'Terminal San José', 'Aeropuerto Daniel Oduber', '13:00', '15:30', 'Transportes Nacionales S.A.', 40, 'Completado'),
('Privado', 'Aeropuerto Juan Santamaría', 'Hotel Wyndham', '14:00', '14:35', 'Juan Alfaro', 6, 'Programado'),
('Shuttle', 'Hotel Intercontinental', 'Aeropuerto Juan Santamaría', '16:00', '16:30', 'Carlos Brenes', 10, 'Cancelado');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM LGT.LOGISTICA_TERRESTRE;


-- ==============================================
--BLOQUE 20: Servicios de Carga y Logística Aérea
-- ==============================================

--Para el manejo de carga en logística aérea hay una gestión diferenciada de vuelos 
--exclusivamente de carga, operadores logísticos y clientes industriales.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA CRG;
GO

-- =========================================
-- 1. TABLA OPERADORES_CARGA
-- =========================================

CREATE TABLE CRG.OPERADORES_CARGA (
    ID_Operador INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Pais_Origen INT NOT NULL,
    Tipo_Operador NVARCHAR(50),
    Contacto NVARCHAR(100),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Operador_Pais FOREIGN KEY (Pais_Origen) 
    REFERENCES INF.PAISES(ID_Pais)
);
GO

-- =========================================
-- 2. TABLA VUELOS_CARGA
-- =========================================

CREATE TABLE CRG.VUELOS_CARGA (
    ID_VueloCarga INT IDENTITY(1,1) PRIMARY KEY,
    ID_Aeronave INT NOT NULL,
    ID_Ruta INT NOT NULL,
    Fecha_Salida DATE NOT NULL,
    Hora_Salida TIME NOT NULL,
    Peso_Total_Kg DECIMAL(10,2),
    Volumen_Total_M3 DECIMAL(10,2),
    Estado NVARCHAR(30) DEFAULT 'Programado',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_VueloCarga_Aeronave FOREIGN KEY (ID_Aeronave) 
    REFERENCES OPA.AERONAVES(ID_Aeronave),
    CONSTRAINT FK_VueloCarga_Ruta FOREIGN KEY (ID_Ruta) 
    REFERENCES VUE.RUTAS_AEREAS(ID_Ruta)
);
GO

-- =========================================
-- 3. TABLA CARGAS_TRANSPORTADAS
-- =========================================

CREATE TABLE CRG.CARGAS_TRANSPORTADAS (
    ID_Carga INT IDENTITY(1,1) PRIMARY KEY,
    ID_VueloCarga INT NOT NULL,
    ID_Operador INT NOT NULL,
    Descripcion NVARCHAR(255),
    Peso_Kg DECIMAL(10,2),
    Volumen_M3 DECIMAL(10,2),
    Tipo_Carga NVARCHAR(50),
    Estado NVARCHAR(30) DEFAULT 'Registrada',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Carga_Vuelo FOREIGN KEY (ID_VueloCarga) 
    REFERENCES CRG.VUELOS_CARGA(ID_VueloCarga),
    CONSTRAINT FK_Carga_Operador FOREIGN KEY (ID_Operador) 
    REFERENCES CRG.OPERADORES_CARGA(ID_Operador)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 20
-- =========================================

INSERT INTO CRG.OPERADORES_CARGA (Nombre, Pais_Origen, Tipo_Operador, Contacto)
VALUES
('DHL Aviation', 1, 'Aéreo', 'dhl@aviation.com'),
('FedEx Express', 1, 'Aéreo', 'contact@fedex.com'),
('Kuehne+Nagel Logistics', 3, 'Logístico', 'logistica@kn.com'),
('Aduana Centroamericana', 1, 'Aduanero', 'contacto@aduana.cr');
GO

-- ===========================================================================================

INSERT INTO CRG.VUELOS_CARGA (ID_Aeronave, ID_Ruta, Fecha_Salida, Hora_Salida, Peso_Total_Kg, Volumen_Total_M3, Estado)
VALUES
(1, 1, '2025-06-15', '06:00:00', 12000.00, 150.5, 'Programado'),
(2, 2, '2025-06-16', '07:30:00', 9000.00, 110.0, 'Finalizado'),
(3, 4, '2025-06-17', '09:45:00', 15000.00, 200.0, 'En tránsito');
GO

-- ===========================================================================================

INSERT INTO CRG.CARGAS_TRANSPORTADAS (ID_VueloCarga, ID_Operador, Descripcion, Peso_Kg, Volumen_M3, Tipo_Carga, Estado)
VALUES
(1, 1, 'Electrodomésticos pequeños', 3000.00, 40.0, 'General', 'Registrada'),
(1, 2, 'Documentación urgente', 120.00, 1.2, 'Valiosa', 'Registrada'),
(2, 3, 'Medicamentos refrigerados', 2500.00, 35.0, 'Perecedera', 'Registrada'),
(3, 1, 'Equipos de computación', 5000.00, 60.0, 'General', 'Registrada'),
(3, 4, 'Químicos controlados', 800.00, 10.0, 'Peligrosa', 'Retenida');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM CRG.OPERADORES_CARGA;
SELECT * FROM CRG.VUELOS_CARGA;
SELECT * FROM CRG.CARGAS_TRANSPORTADAS;


-- ====================================================
--BLOQUE 21: Servicios de Emergencia y Respuesta Rápida
-- ====================================================

--Es de suma importancia tener una cobertura formal sobre brigadas de emergencia, unidades de rescate,
--bomberos aeronáuticos o situaciones de riesgo en pista y terminal.

--Creación de SCHEMA para el bloque:
CREATE SCHEMA EMR;
GO

-- =========================================
-- 1. TABLA UNIDADES_EMERGENCIA
-- =========================================

CREATE TABLE EMR.UNIDADES_EMERGENCIA (
    ID_Unidad INT IDENTITY(1,1) PRIMARY KEY,
    Tipo_Unidad NVARCHAR(50),
    Placa_Unidad NVARCHAR(20),
    Responsable NVARCHAR(100),
    Estado NVARCHAR(30) DEFAULT 'Activa',
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
);
GO

-- =========================================
-- 2. TABLA INTERVENCIONES_EMERGENCIA
-- =========================================

CREATE TABLE EMR.INTERVENCIONES_EMERGENCIA (
    ID_Intervencion INT IDENTITY(1,1) PRIMARY KEY,
    ID_Unidad INT NOT NULL,
    ID_Vuelo INT NULL,
    Fecha DATETIME NOT NULL,
    Tipo_Incidente NVARCHAR(100),
    Resultado NVARCHAR(100),
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Intervencion_Unidad FOREIGN KEY (ID_Unidad) 
    REFERENCES EMR.UNIDADES_EMERGENCIA(ID_Unidad),
    CONSTRAINT FK_Intervencion_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO

-- =========================================
-- INSERTS de prueba – BLOQUE 21
-- =========================================

INSERT INTO EMR.UNIDADES_EMERGENCIA (Tipo_Unidad, Placa_Unidad, Responsable, Estado)
VALUES
('Bomberos', 'CR-EM-001', 'Carlos Méndez', 'Activa'),
('Ambulancia', 'CR-AM-023', 'Ana Rodríguez', 'Activa'),
('Cruz Roja', 'CR-CR-011', 'Mario Alfaro', 'Activa'),
('Policía Aeroportuaria', 'CR-PA-009', 'Oficial Vargas', 'Activa');
GO

-- ===========================================================================================

INSERT INTO EMR.INTERVENCIONES_EMERGENCIA (ID_Unidad, ID_Vuelo, Fecha, Tipo_Incidente, Resultado, Observaciones)
VALUES
(1, 4, '2025-06-15 06:30:00', 'Incendio menor en motor', 'Extinguido en pista', 'Intervención rápida, sin lesionados'),
(2, 5, '2025-06-16 08:10:00', 'Pasajero descompensado', 'Traslado a hospital', 'Adulto mayor atendido en ambulancia'),
(3, 6, '2025-06-17 14:25:00', 'Evacuación preventiva', 'Procedimiento completo', 'Amenaza falsa, sin riesgo real'),
(4, 7, '2025-06-18 10:45:00', 'Sospecha de objeto prohibido', 'Zona asegurada', 'Policía despejó el área sin novedad');
GO

-- ===========================================================================================
--Select de prueba:
SELECT * FROM EMR.UNIDADES_EMERGENCIA;
SELECT * FROM EMR.INTERVENCIONES_EMERGENCIA;


-- ====================================================================================================================
-- ====================================================================================================================
-- ====================================================================================================================

-- =========================================
--Propuesta de tabla para ajuste de horarios
-- =========================================

--Esta tabla va a usar un modelo de Machine Learning (Aprendizaje Automático)
--conectandose con datos históricos del sistema tale como:

--Retrasos pasados
--Condiciones climáticas
--Tipo de vuelo (nacional/internacional)
--Hora del día
--Tráfico aéreo en ruta
--Capacidad del aeropuerto
--Aerolínea y modelo de avión

--Luego estos datos los vamos a conectar a una plataforma de IA dónde podemos usar modelos creados
--Ejemplos:
--Plataforma	/ ¿Qué hace?	/ ¿Lenguaje común?
--Azure ML	/ Modelo predictivo en la nube	/ No-code y Python
--Google Vertex AI	/ IA en la nube para datos históricos	/ Python
--scikit-learn (Python)	/ Biblioteca para crear modelos localmente	/ Python
--BigML	/ Plataforma visual para modelos predictivos	/ Interfaz web (no requiere código)

--¿Y cómo hace la IA para “ajustar”?
--1.Aprende del pasado: Se le da a la IA muchos datos reales de vuelos, clima y retrasos anteriores.
--2.Encuentra patrones: Detecta, por ejemplo, que “cuando llueve mucho en SJO, los vuelos se atrasan 20 minutos promedio”.
--3.Predice el futuro: Con nuevos datos del clima (API), tráfico y ruta, predice si ese vuelo también se atrasará, y cuánto.
--Ejemplo real:
--Vuelo AV693, ruta PTY–SJO, clima: tormenta ligera → predicción IA: salida real + 15 min.

--¿Cómo se conecta con nuestro sistema?
--Cada vez que se actualiza el clima o un vuelo se programa:
--El sistema le manda esos datos a la IA.
--La IA responde con: “Probabilidad de retraso: 80%. Retraso estimado: 17 minutos”.
--Y podemos guardar ese ajuste en un campo nuevo: Retraso_Previsto.

--¿Qué necesitamos?
--Una tabla histórica (VUELOS, CLIMA, ESTADISTICAS_DIARIAS).
--API de clima o tráfico aéreo (como OpenWeatherMap).
--Un modelo de IA entrenado (se puede usar Python o una plataforma como BigML).
--Un programador que conecte esa IA al sistema.


-- ====================================================
--BLOQUE 22: Propuesta de tabla para ajuste de horarios
-- ====================================================

--PROPUESTA DE LA TABLA (explicada)

--Creación de SCHEMA para el bloque:
CREATE SCHEMA PRE;
GO

CREATE TABLE PRE.HISTORICO_OPERACIONAL_VUELOS (
    ID_Historico INT IDENTITY(1,1) PRIMARY KEY,
    ID_Vuelo INT NOT NULL, -- Con FK a VUELOS
    Fecha DATE NOT NULL,
    Hora_Salida_Programada TIME NOT NULL,
    Hora_Salida_Real TIME,
-- Datos del clima tomados en el momento de la salida
    Clima_Temperatura DECIMAL(5,2),
    Clima_Humedad DECIMAL(5,2),
    Clima_Condicion NVARCHAR(50),
-- Información operativa consolidada
    Retraso_Minutos INT,
    Estado_Vuelo NVARCHAR(30), -- Programado, Finalizado, Cancelado
    Carga_Pasajeros INT,
    Carga_Carga_Kg DECIMAL(10,2),
-- Resultado del análisis o predicción
    Observaciones NVARCHAR(255),
    Fecha_Creacion DATETIME2 DEFAULT GETDATE(),
    Fecha_Modificacion DATETIME2 NULL,
    CONSTRAINT FK_Historico_Vuelo FOREIGN KEY (ID_Vuelo) 
    REFERENCES VUE.VUELOS(ID_Vuelo)
);
GO


-- ====================================================================================================================
-- ====================================================================================================================
-- ====================================================================================================================

-- ====================================================
--Indices recomendados:
-- ====================================================

--Orden lógico,NO físico, el indice no clusterizado no reordena fisicamente los datos de la tabla en el disco.
--La tabla (los datos reales) permanece en le orden físico que fué insertada.

--Cuando usar indices no clusterizados:
--Cuando las columnas se usan frecuentemente con cláusulas: WHERE, ORDER BY, JOIN o GROUP BY en consultas.
--Cuando se necesita optimizar múltiples caminos de acceso a los datos (ya que pueden haber varios).
--Para mejorar el rendimiento de las búsquedas en las columnas que no son PK.

--Un indice no clusterizado es una herramienta fundamental para mejorar el rendimiento de la consultas en SQL Server.

CREATE NONCLUSTERED INDEX IDX_INF_AEROPUERTOS_Capacidad_Anual_Pasajeros ON INF.AEROPUERTOS (Capacidad_Anual_Pasajeros);
CREATE NONCLUSTERED INDEX IDX_OPA_AERONAVES_Capacidad_Pasajeros ON OPA.AERONAVES (Capacidad_Pasajeros);
CREATE NONCLUSTERED INDEX IDX_OPA_AERONAVES_Capacidad_Carga_KG ON OPA.AERONAVES (Capacidad_Carga_KG);
CREATE NONCLUSTERED INDEX IDX_VUE_RUTAS_AEREAS_Distancia_KM ON VUE.RUTAS_AEREAS (Distancia_KM);
CREATE NONCLUSTERED INDEX IDX_VUE_RUTAS_AEREAS_Duracion_Estimada_MIN ON VUE.RUTAS_AEREAS (Duracion_Estimada_MIN);
CREATE NONCLUSTERED INDEX IDX_INT_ESTADISTICAS_DIARIAS_Total_Vuelos ON INT.ESTADISTICAS_DIARIAS (Total_Vuelos);
CREATE NONCLUSTERED INDEX IDX_INT_ESTADISTICAS_DIARIAS_Vuelos_Retrasados ON INT.ESTADISTICAS_DIARIAS (Vuelos_Retrasados);
CREATE NONCLUSTERED INDEX IDX_INT_ESTADISTICAS_DIARIAS_Total_Pasajeros ON INT.ESTADISTICAS_DIARIAS (Total_Pasajeros);
CREATE NONCLUSTERED INDEX IDX_INT_ESTADISTICAS_DIARIAS_Cancelaciones ON INT.ESTADISTICAS_DIARIAS (Cancelaciones);
CREATE NONCLUSTERED INDEX IDX_MKT_FIDELIDAD_PASAJERO_Puntos_Acumulados ON MKT.FIDELIDAD_PASAJERO (Puntos_Acumulados);
CREATE NONCLUSTERED INDEX IDX_LGT_LOGISTICA_TERRESTRE_Capacidad ON LGT.LOGISTICA_TERRESTRE (Capacidad);


