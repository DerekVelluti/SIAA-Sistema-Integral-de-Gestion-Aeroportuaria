-- ==========================================================================
--SP_Insertar_Historico_Vuelo (VERSION DEFINITIVA) en SIAA
-- ==========================================================================
--****Aplicado en SIAA****

USE SIAA; -- ¡IMPORTANTE! Este SP se crea y ejecuta en la base de datos SIAA
GO

USE SIAA; -- ¡IMPORTANTE! Este SP se crea y ejecuta en la base de datos SIAA
GO

-- 1. Eliminar el SP si ya existe para poder crearlo de nuevo
IF OBJECT_ID('SP_Insertar_Historico_Vuelo') IS NOT NULL DROP PROCEDURE SP_Insertar_Historico_Vuelo;
GO

-- 2. Crear el Stored Procedure (Ahora realiza un UPSERT inteligente con CLIMA corregido)
CREATE PROCEDURE SP_Insertar_Historico_Vuelo
    @ID_Vuelo INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE
        @Fecha DATE,
        @HoraProgramada TIME,
        @HoraReal TIME,
        @Estado NVARCHAR(30),
        @Temp DECIMAL(5,2),
        @Humedad DECIMAL(5,2),
        @Condicion NVARCHAR(50),
        @RetrasoMin INT,
        @Pasajeros INT,
        @CargaKg DECIMAL(10,2),
        @ID_Aeropuerto_Origen_Vuelo INT; -- Nueva variable para almacenar el ID_Aeropuerto_Origen

    -- Paso 1: Traer datos básicos del vuelo desde VUE.VUELOS
    SELECT
        @Fecha = V.Fecha_Salida,
        @HoraProgramada = V.Hora_Salida,
        @HoraReal = V.Hora_Llegada,
        @Estado = V.Estado,
        @ID_Aeropuerto_Origen_Vuelo = RA.ID_Aeropuerto_Origen -- ¡AHORA SÍ! Obtener el ID_Aeropuerto_Origen
    FROM VUE.VUELOS AS V
    INNER JOIN VUE.RUTAS_AEREAS AS RA ON V.ID_Ruta = RA.ID_Ruta -- Unir con RUTAS_AEREAS
    WHERE V.ID_Vuelo = @ID_Vuelo;

    -- Salir si el vuelo no se encuentra (este SP solo debe llamarse para vuelos existentes)
    IF @Fecha IS NULL
    BEGIN
        RETURN;
    END;

    -- Paso 2: Calcular retraso si hay hora real
    SET @RetrasoMin = ISNULL(DATEDIFF(MINUTE, @HoraProgramada, @HoraReal), 0);

    -- Paso 3: Obtener clima más cercano para el aeropuerto de ORIGEN del vuelo
    -- Usamos @ID_Aeropuerto_Origen_Vuelo para consultar MET.CLIMA
    SELECT TOP 1
        @Temp = T.Temperatura_C,
        @Humedad = T.Humedad_Porc,
        @Condicion = T.Condicion
    FROM MET.CLIMA AS T
    WHERE T.Fecha = @Fecha
    AND T.ID_Aeropuerto = @ID_Aeropuerto_Origen_Vuelo -- ¡CORREGIDO! Usamos el ID del aeropuerto de origen
    ORDER BY ABS(DATEDIFF(MINUTE, T.Hora, @HoraProgramada)); -- Clima más cercano a la hora programada

    -- Paso 4: Contar pasajeros (ISNULL para asegurar 0 si no hay reservaciones)
    SELECT @Pasajeros = COUNT(*)
    FROM COM.RESERVACIONES
    WHERE ID_Vuelo = @ID_Vuelo;

    -- Paso 5: Sumar carga de equipaje (ISNULL para asegurar 0 si no hay equipaje)
    SELECT @CargaKg = ISNULL(SUM(Peso), 0)
    FROM EQP.EQUIPAJE
    WHERE ID_Vuelo = @ID_Vuelo;

    -- Paso 6: Realizar el UPSERT en PRE.HISTORICO_OPERACIONAL_VUELOS
    MERGE PRE.HISTORICO_OPERACIONAL_VUELOS AS Target
    USING (SELECT @ID_Vuelo AS ID_Vuelo_Source,
                  @Fecha AS Fecha_Source,
                  @HoraProgramada AS Hora_Salida_Programada_Source,
                  @HoraReal AS Hora_Salida_Real_Source,
                  @Temp AS Clima_Temperatura_Source,
                  @Humedad AS Clima_Humedad_Source,
                  @Condicion AS Clima_Condicion_Source,
                  @RetrasoMin AS Retraso_Minutos_Source,
                  @Estado AS Estado_Vuelo_Source,
                  @Pasajeros AS Carga_Pasajeros_Source,
                  @CargaKg AS Carga_Carga_Kg_Source
           ) AS Source
    ON (Target.ID_Vuelo = Source.ID_Vuelo_Source)
    WHEN MATCHED AND (
        -- Condición para UPDATE: si CUALQUIER campo operacional relevante ha cambiado
        ISNULL(Target.Fecha, '1900-01-01') <> ISNULL(Source.Fecha_Source, '1900-01-01') OR
        ISNULL(Target.Hora_Salida_Programada, '00:00:00') <> ISNULL(Source.Hora_Salida_Programada_Source, '00:00:00') OR
        ISNULL(Target.Hora_Salida_Real, '00:00:00') <> ISNULL(Source.Hora_Salida_Real_Source, '00:00:00') OR
        ISNULL(Target.Clima_Temperatura, -999.99) <> ISNULL(Source.Clima_Temperatura_Source, -999.99) OR
        ISNULL(Target.Clima_Humedad, -999.99) <> ISNULL(Source.Clima_Humedad_Source, -999.99) OR
        ISNULL(Target.Clima_Condicion, '') <> ISNULL(Source.Clima_Condicion_Source, '') OR
        ISNULL(Target.Retraso_Minutos, -999) <> ISNULL(Source.Retraso_Minutos_Source, -999) OR
        ISNULL(Target.Estado_Vuelo, '') <> ISNULL(Source.Estado_Vuelo_Source, '') OR
        ISNULL(Target.Carga_Pasajeros, -999) <> ISNULL(Source.Carga_Pasajeros_Source, -999) OR
        ISNULL(Target.Carga_Carga_Kg, -999.99) <> ISNULL(Source.Carga_Carga_Kg_Source, -999.99)
    ) THEN
        -- Actualizar los campos operativos y la fecha de modificación propia de PRE.HISTORICO_OPERACIONAL_VUELOS
        UPDATE SET
            Target.Fecha = Source.Fecha_Source,
            Target.Hora_Salida_Programada = Source.Hora_Salida_Programada_Source,
            Target.Hora_Salida_Real = Source.Hora_Salida_Real_Source,
            Target.Clima_Temperatura = Source.Clima_Temperatura_Source,
            Target.Clima_Humedad = Source.Clima_Humedad_Source,
            Target.Clima_Condicion = Source.Clima_Condicion_Source,
            Target.Retraso_Minutos = Source.Retraso_Minutos_Source,
            Target.Estado_Vuelo = Source.Estado_Vuelo_Source,
            Target.Carga_Pasajeros = Source.Carga_Pasajeros_Source,
            Target.Carga_Carga_Kg = Source.Carga_Carga_Kg_Source,
            -- Target.Observaciones NO se toca aquí, es actualizado solo por SP_Actualizar_Prediccion_Retraso
            Target.Fecha_Modificacion = GETDATE() -- Actualiza la propia fecha de modificación de esta tabla
    WHEN NOT MATCHED BY TARGET THEN
        -- Insertar un nuevo registro si no existe
        INSERT (
            ID_Vuelo, Fecha, Hora_Salida_Programada, Hora_Salida_Real,
            Clima_Temperatura, Clima_Humedad, Clima_Condicion,
            Retraso_Minutos, Estado_Vuelo, Carga_Pasajeros, Carga_Carga_Kg,
            Observaciones, Fecha_Creacion, Fecha_Modificacion
        )
        VALUES (
            Source.ID_Vuelo_Source, Source.Fecha_Source, Source.Hora_Salida_Programada_Source, Source.Hora_Salida_Real_Source,
            Source.Clima_Temperatura_Source, Source.Clima_Humedad_Source, Source.Clima_Condicion_Source,
            Source.Retraso_Minutos_Source, Source.Estado_Vuelo_Source, Source.Carga_Pasajeros_Source, Source.Carga_Carga_Kg_Source,
            NULL, -- Observaciones es NULL en la inserción inicial
            GETDATE(), -- Fecha_Creacion se establece al momento de la inserción
            NULL       -- Fecha_Modificacion es NULL en la inserción inicial
        );
END;
GO

USE SIAA; -- ¡IMPORTANTE! Este SP se crea y ejecuta en la base de datos SIAA
GO

-- 1. Eliminar el SP si ya existe para poder crearlo de nuevo
IF OBJECT_ID('SP_Generar_Historico_Para_Todos_Los_Vuelos') IS NOT NULL 
    DROP PROCEDURE SP_Generar_Historico_Para_Todos_Los_Vuelos;
GO

-- 2. Crear el Stored Procedure
CREATE PROCEDURE SP_Generar_Historico_Para_Todos_Los_Vuelos
AS
BEGIN
    SET NOCOUNT ON;

    PRINT 'Iniciando la generación/actualización del histórico para TODOS los vuelos...';

    DECLARE @ID_Vuelo_Actual INT;

    -- Usamos un cursor para iterar sobre todos los ID_Vuelo existentes en la tabla VUE.VUELOS
    DECLARE cur_all_flights CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR
    SELECT ID_Vuelo
    FROM VUE.VUELOS
    ORDER BY ID_Vuelo; -- Ordenar para un procesamiento consistente

    OPEN cur_all_flights;
    FETCH NEXT FROM cur_all_flights INTO @ID_Vuelo_Actual;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Llamar al Stored Procedure que realiza el UPSERT para cada ID_Vuelo
        -- Este SP (SP_Insertar_Historico_Vuelo) se encargará de insertar o actualizar
        -- la fila correspondiente en PRE.HISTORICO_OPERACIONAL_VUELOS.
        EXEC SP_Insertar_Historico_Vuelo @ID_Vuelo = @ID_Vuelo_Actual;
        
        -- Puedes descomentar la siguiente línea si quieres ver un mensaje por cada vuelo procesado
        -- PRINT '  -> Procesado/Actualizado histórico para ID_Vuelo: ' + CAST(@ID_Vuelo_Actual AS NVARCHAR(10));
        
        FETCH NEXT FROM cur_all_flights INTO @ID_Vuelo_Actual;
    END;

    CLOSE cur_all_flights;
    DEALLOCATE cur_all_flights;

    PRINT 'Generación/Actualización del histórico para TODOS los vuelos completada.';
END;
GO


-- ==========================================================================
--SP_Actualizar_Prediccion_Retraso en SIAA
-- ==========================================================================
--****Aplicado en SIAA****

USE SIAA; -- ¡IMPORTANTE! Este SP se crea y ejecuta en la base de datos SIAA
GO

-- 1. Eliminar el SP si ya existe para poder crearlo de nuevo
IF OBJECT_ID('SP_Actualizar_Prediccion_Retraso') IS NOT NULL DROP PROCEDURE SP_Actualizar_Prediccion_Retraso;
GO

-- 2. Crear el Stored Procedure para actualizar la predicción de retraso
CREATE PROCEDURE SP_Actualizar_Prediccion_Retraso
    @ID_Historico INT,
    @MensajePrediccion NVARCHAR(255)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE PRE.HISTORICO_OPERACIONAL_VUELOS
    SET Observaciones = @MensajePrediccion
    WHERE ID_Historico = @ID_Historico;
END;
GO

-- ==========================================================================
--Trigger TR_Actualizar_Historico_Vuelo en SIAA.VUE.VUELOS 
-- ==========================================================================
--****Aplicado en SIAA****

USE SIAA; -- ¡IMPORTANTE! Este Trigger se crea en la base de datos SIAA
GO

-- Eliminar el Trigger si ya existe para poder crearlo de nuevo
IF OBJECT_ID('TR_Actualizar_Historico_Vuelo') IS NOT NULL DROP TRIGGER TR_Actualizar_Historico_Vuelo;
GO

-- Crear el Trigger AFTER INSERT, UPDATE en la tabla VUE.VUELOS
-- Este trigger se disparará cada vez que se inserte o actualice un registro en VUE.VUELOS.
-- Llamará a SP_Insertar_Historico_Vuelo para mantener PRE.HISTORICO_OPERACIONAL_VUELOS actualizado.
CREATE TRIGGER TR_Actualizar_Historico_Vuelo
ON VUE.VUELOS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ID_Vuelo_Actual INT;

    -- Declarar un cursor para procesar cada ID_Vuelo afectado por el trigger
    -- Un cursor es necesario porque un trigger puede dispararse para múltiples filas (multi-row insert/update)
    DECLARE cur_vuelos CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR
    SELECT ID_Vuelo FROM inserted;

    OPEN cur_vuelos;
    FETCH NEXT FROM cur_vuelos INTO @ID_Vuelo_Actual;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Llamar al Stored Procedure que realiza el UPSERT en PRE.HISTORICO_OPERACIONAL_VUELOS
        EXEC SP_Insertar_Historico_Vuelo @ID_Vuelo = @ID_Vuelo_Actual;
        
        FETCH NEXT FROM cur_vuelos INTO @ID_Vuelo_Actual;
    END;

    CLOSE cur_vuelos;
    DEALLOCATE cur_vuelos;
END;
GO

-- ==========================================================================
SP_Refrescar_Historico_Vuelos_Activos_SIAA en SIAA (Para Programar Agent)
-- ==========================================================================

USE SIAA; -- ¡IMPORTANTE! Este SP se crea y ejecuta en la base de datos SIAA
GO

-- 1. Eliminar el SP si ya existe para poder crearlo de nuevo
IF OBJECT_ID('SP_Refrescar_Historico_Vuelos_Activos_SIAA') IS NOT NULL DROP PROCEDURE SP_Refrescar_Historico_Vuelos_Activos_SIAA;
GO

-- 2. Crear el Stored Procedure para refrescar periódicamente vuelos activos
CREATE PROCEDURE SP_Refrescar_Historico_Vuelos_Activos_SIAA
AS
BEGIN
    SET NOCOUNT ON;

    PRINT 'Iniciando refresco periódico de PRE.HISTORICO_OPERACIONAL_VUELOS para vuelos activos...';

    DECLARE @ID_Vuelo_Actual INT;

    -- Cursor para obtener los ID_Vuelo de vuelos activos/próximos que nos interesan
    -- Define "activos" según tu lógica de negocio. Ejemplos:
    -- - Vuelos programados para hoy o en el futuro cercano.
    -- - Vuelos cuyo estado es 'Programado', 'En Vuelo', 'Retrasado'.
    -- - Podrías añadir lógica para vuelos que han cambiado recientemente en RESERVACIONES/EQUIPAJE.
    DECLARE cur_active_flights CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR
    SELECT ID_Vuelo
    FROM VUE.VUELOS
    WHERE
        -- Vuelos que son hoy o en los próximos 7 días (ajusta según tu necesidad)
        Fecha_Salida >= CAST(GETDATE() AS DATE) AND Fecha_Salida <= DATEADD(DAY, 7, CAST(GETDATE() AS DATE))
        OR
        -- O vuelos que están en un estado que sugiere que aún son "activos" u "operativos"
        Estado IN ('Programado', 'En Vuelo', 'Retrasado', 'Desviado', 'Aterrizado'); 
        -- Considera si 'Aterrizado' debe seguir siendo monitoreado por un tiempo corto.

    OPEN cur_active_flights;
    FETCH NEXT FROM cur_active_flights INTO @ID_Vuelo_Actual;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Llamar al Stored Procedure que realiza el UPSERT para actualizar el histórico
        EXEC SP_Insertar_Historico_Vuelo @ID_Vuelo = @ID_Vuelo_Actual;
        -- PRINT '  -> Refrescado histórico para ID_Vuelo: ' + CAST(@ID_Vuelo_Actual AS NVARCHAR(10));
        
        FETCH NEXT FROM cur_active_flights INTO @ID_Vuelo_Actual;
    END;

    CLOSE cur_active_flights;
    DEALLOCATE cur_active_flights;

    PRINT 'Refresco de PRE.HISTORICO_OPERACIONAL_VUELOS completado.';
END;
GO

-- ==========================================================================
-- Sentencia para Llamar a SP_Refrescar_Historico_Vuelos_Activos_SIAA
-- (La ejecutarías manualmente para probar, o la programarías en SQL Server Agent)
-- ==========================================================================
PRINT 'Llamando al SP_Refrescar_Historico_Vuelos_Activos_SIAA...';
EXEC SP_Refrescar_Historico_Vuelos_Activos_SIAA;
GO


--***************************************************************************
-- ==========================================================================
--Sentencias para Llamar a Stored Procedures en SIAA
-- ==========================================================================
--***************************************************************************

USE SIAA; -- Asegúrate de estar en la base de datos principal SIAA
GO

-- ==========================================================================
-- 1. Llamada a SP_Insertar_Historico_Vuelo (el SP que hace UPSERT)
-- Este SP es llamado automáticamente por el TRIGGER en VUE.VUELOS
-- y por el SP_Refrescar_Historico_Vuelos_Activos_SIAA.
-- Aquí lo llamas para una prueba manual de un ID_Vuelo específico.
-- ==========================================================================
DECLARE @VueloID_Para_Historico INT = 1; -- ¡REEMPLAZA con un ID_Vuelo REAL de VUE.VUELOS!
PRINT 'Llamando a SP_Insertar_Historico_Vuelo para ID_Vuelo: ' + CAST(@VueloID_Para_Historico AS NVARCHAR(10));
EXEC SP_Insertar_Historico_Vuelo @ID_Vuelo = @VueloID_Para_Historico;
PRINT 'SP_Insertar_Historico_Vuelo completado.';
GO

-- ==========================================================================
-- 2. Llamada a SP_Actualizar_Prediccion_Retraso
-- Este SP es llamado por tu aplicación externa después de la predicción de IA.
-- Aquí lo llamas para una prueba manual.
-- ==========================================================================
DECLARE @HistoricoID_Para_Actualizar INT = 1; -- ¡REEMPLAZA con un ID_Historico REAL de PRE.HISTORICO_OPERACIONAL_VUELOS!
DECLARE @MensajePrediccion_IA NVARCHAR(255) = 'Predicción IA: Retraso estimado de 15 minutos debido a fuerte viento.';
PRINT 'Llamando a SP_Actualizar_Prediccion_Retraso para ID_Historico: ' + CAST(@HistoricoID_Para_Actualizar AS NVARCHAR(10));
EXEC SP_Actualizar_Prediccion_Retraso
    @ID_Historico = @HistoricoID_Para_Actualizar,
    @MensajePrediccion = @MensajePrediccion_IA;
PRINT 'SP_Actualizar_Prediccion_Retraso completado.';
GO

-- Opcional: Verifica el resultado de la actualización de la predicción
-- SELECT ID_Historico, ID_Vuelo, Observaciones FROM PRE.HISTORICO_OPERACIONAL_VUELOS WHERE ID_Historico = 1; -- Reemplaza con tu ID

-- ==========================================================================
-- 3. Llamada a SP_Refrescar_Historico_Vuelos_Activos_SIAA
-- Este SP se ejecuta periódicamente (idealmente vía SQL Server Agent Job).
-- Recorre los vuelos activos y llama a SP_Insertar_Historico_Vuelo para actualizarlos.
-- ==========================================================================
PRINT 'Llamando a SP_Refrescar_Historico_Vuelos_Activos_SIAA (para simular el trabajo programado)...';
EXEC SP_Refrescar_Historico_Vuelos_Activos_SIAA;
PRINT 'SP_Refrescar_Historico_Vuelos_Activos_SIAA completado.';
GO

-- ==========================================================================
-- Sentencia para Llamar a SP_Generar_Historico_Para_Todos_Los_Vuelos
-- ==========================================================================
PRINT 'Llamando a SP_Generar_Historico_Para_Todos_Los_Vuelos...';
EXEC SP_Generar_Historico_Para_Todos_Los_Vuelos;
GO

-- ==========================================================================
-- NOTA: El TRIGGER TR_Actualizar_Historico_Vuelo no se llama directamente con EXEC.
-- Se activa automáticamente cuando se INSERTAN o ACTUALIZAN registros en VUE.VUELOS.
-- Puedes probarlo insertando o actualizando una fila en VUE.VUELOS y luego
-- consultando PRE.HISTORICO_OPERACIONAL_VUELOS para ver el efecto.
-- Ejemplo de cómo se dispararía el trigger (NO EJECUTAR EL INSERT O UPDATE SI NO QUIERES CAMBIAR TUS DATOS REALES):
-- INSERT INTO VUE.VUELOS (ID_Vuelo, Numero_Vuelo, ID_Ruta, ID_Aeronave, ...) VALUES (999, 'XYZ999', ...);
-- UPDATE VUE.VUELOS SET Estado = 'Retrasado' WHERE ID_Vuelo = 1;
-- ==========================================================================

